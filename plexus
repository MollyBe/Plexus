#!/usr/bin/env bash
HEADER_TEXT="\\e[93m=== Plexus v0.9.50 - https://github.com/Wolveix/Plexus ===\\e[0m\\n"
set -e
if [ -f "$HOME"/.config/plexus/plexus.conf ]; then
  source "$HOME"/.config/plexus/plexus.conf
  if [ -z "$audio_codec" ] || [ -z "$convert_dir" ] || [ -z "$converted_dir" ] || [ -z "$ffmpeg_binary" ] || [ -z "$ffmpeg_threads" ] || [ -z "$ffmpeg_preset" ] || [ -z "$ffprobe_binary" ] || [ -z "$force_overwrite" ] || [ -z "$list_file" ] || [ -z "$media_container" ] || [ -z "$media_dir" ] || [ -z "$video_codec" ] || [ -z "$video_library" ]; then
    printf "$audio_codec"
    printf "Your config file ($HOME/.config/plexus/plexus.conf) is missing required parameters.\\nMove or delete it and then run Plexus again.\\n"
    exit 0
  fi
else
  mkdir -p "$HOME"/.config/plexus/
  curl -O https://raw.githubusercontent.com/Wolveix/Plexus/master/plexus.conf 2>/dev/null
  mv plexus.conf "$HOME"/.config/plexus/
  printf "\\e[32mA config file could not be found. The default file has been downloaded.\\n"
fi
distro=$(awk -F= '/^NAME/{print $2}' /etc/os-release)
case $distro in
  '"CentOS Linux"')
    packages="yum -q -y"
    ;;
  '"Debian GNU/Linux"' | '"Ubuntu"')
    packages="apt-get -qq -y"
    ;;
  *)
    printf "\\nIt doesn't look like your distro is supported.\\nCreate an issue here: https://github.com/Wolveix/Plexus/issues/new\\n"
    exit
    ;;
esac

if [ "$(dpkg-query -W -f='${Status}' ffmpeg 2>/dev/null | grep -c "ok installed")" -eq 1 ]; then
  dependency_ffmpeg=true
else
  dependency_ffmpeg=false
fi

if [ "$(dpkg-query -W -f='${Status}' fuse 2>/dev/null | grep -c "ok installed")" -eq 1 ]; then
  dependency_fuse=true
else
  dependency_fuse=false
fi

if [ -f "$HOME/.config/rclone/rclone.conf" ]; then
  dependency_rclone=true
else
  dependency_rclone=false
fi

function main () {
  VERBOSE=6
  declare -A LOG_LEVELS
  LOG_LEVELS=([0]="emerg" [1]="alert" [2]="crit" [3]="err" [4]="warning" [5]="notice" [6]="info" [7]="debug")
  function .log () {
    local LEVEL=${1}
    shift
    if [ "${VERBOSE}" -ge "${LEVEL}" ]; then
      echo "[${LOG_LEVELS[$LEVEL]}]" "$@"
    fi
  }
}

function set_config(){
    ovalue=$(echo $1 | sed 's_/_\\/_g')
    nvalue=$(echo $2 | sed 's_/_\\/_g')
    sed -ie "s/$ovalue/$nvalue/g" "$HOME"/.config/plexus/plexus.conf
}

function check_variable {
  case $1 in
    "audio")
      case ${2,,} in
        "" | "default" | "aac")
            audio_codec="aac"
            ;;
        "ac3" | "ac-3" | "atsc")
            audio_codec="ac3"
            ;;
        "dca" | "dts")
            audio_codec="dts"
            ;;
        "flac")
            audio_codec="flac"
            ;;
        "mp3" | "mpeg3")
            audio_codec="mp3"
            ;;
        "opus")
            audio_codec="opus"
            ;;
        *)
            audio_codec="null"
            ;;
      esac
      ;;
    "container")
      case ${2,,} in
        "avi")
          media_container="avi"
          ;;
        "mkv")
          media_container="mkv"
          ;;
        "mp4")
          media_container="mp4"
          ;;
        "wmv")
          media_container="wmv"
          ;;
        *)
          media_container="null"
          ;;
      esac
      ;;
    "ffmpeg_preset")
      case ${2,,} in
        "ultrafast" | "superfast" | "faster" | "fast" | "medium" | "slow" | "slower" | "veryslow" | "placebo")
          ffmpeg_preset="$2"
          ;;
        "" | "default" | "veryfast")
          ffmpeg_preset="veryfast"
          ;;
        *)
          ffmpeg_preset="null"
          ;;
      esac
      ;;
    "video")
      case ${2,,} in
        "" | "default" | "x264" | "h.264" | "h264" | "avc" | "libx264")
            video_codec="h264"
            video_library="libx264"
            ;;
        "x265" | "h.265" | "h265" | "hevc" | "libx265")
            video_codec="h265"
            video_library="libx265"
            ;;
        "avi" | "divx" | "libxvid" | "mpeg4" | "mpeg-4" | "xvid")
            video_codec="mpeg4"
            video_library="libxvid"
            ;;
        *)
            video_codec="null"
            video_library="null"
            ;;
      esac
      ;;
    *)
      printf "\\e[31m\\nAn unexpected error has occurred.\\e[0m\\n"
      exit 0
      ;;
  esac
}

function prompt_user {
  answer=""
  while [ -z $answer ]; do
      read -r -p '' answer
      if [ "$answer" == "exit" ] || [ "$answer" == "0" ]; then
        exit 0
      fi

      if [ -n "$1" ]; then
        case "$1" in
          "audio")
            check_variable "audio" "$answer"
            if [ "$audio_codec" == "null" ]; then
              printf "\\nYou must enter a valid codec.\\n"
              answer=""
            fi
            ;;
          "container")
            check_variable "container" "$answer"
            if [ "$media_container" == "null" ]; then
              printf "\\nYou must enter a valid container.\\n"
              answer=""
            fi
            ;;
          "directory")
            if [ ! -d "$answer" ]; then
              printf "\\nYou must enter a valid directory.\\n"
              answer=""
            else
              if [ "${answer: -1}" == "/" ]; then
                  answer="${answer::-1}"
              fi
            fi
            ;;
          "ffmpeg")
            check_variable "ffmpeg_preset" "$answer"
            if [ "$video_codec" == "null" ]; then
              printf "\\nYou must enter a valid preset.\\n"
              answer=""
            fi
            ;;
          "file")
            if [ ! -f "$answer" ]; then
              printf "\\nYou must enter a valid file.\\n"
              answer=""
            fi
            ;;
          "video")
            check_variable "video" "$answer"
            if [ "$video_codec" == "null" ]; then
              printf "\\nYou must enter a valid codec.\\n"
              answer=""
            fi
            ;;
          *)
            # Do nothing
            ;;
        esac
      fi
  done
}

function func_about {
    printf "\\nPlexus is a suite of easy-to-use tools to help manage your media\\ncollection. You can build a list of the media in your collection\\nwhich is incorrectly encoded, and then re-encode all of that media\\nautomatically. Plexus also integrates smoothly with RClone.\\n\\nI created this suite because I knew that I would need a simple CLI\\nsolution to re-encoding all of my media at some point in the future,\\nand no other solution met my requirements.\\n\\nThank you to Mason Rowe for the advice and starting scripts.\\n\\n- Robert Thomas\\n  Managing Director & Lead Software Developer at Arcruy.\\n  https://github.com/Wolveix/Plexus\\n"
}

function func_config {
  printf "\\nWhat config menu would you like to access?\\n"
  select option in "Binaries" "Codecs" "Directories" "FFmpeg" "Exit"
  do
    case "$option" in
      "Binaries")
        printf "\\nWhich binary do you want to set?\\n"
        select option in "FFprobe" "FFmpeg" "RClone" "Exit"
        do
          case "$option" in
            "FFprobe")
              printf "\\n\\nWhat do you want to set the FFprobe binary to?\\n"
              prompt_user "file"
              set_config "ffprobe_binary=\"$ffprobe_binary\"" "ffprobe_binary=\"$answer\""
              printf "\\nFFprobe binary successfully changed.\\n"
              exit 0
              ;;
            "FFmpeg")
              printf "\\n\\nWhat do you want to set the FFmpeg binary to?\\n"
              prompt_user "file"
              set_config "ffmpeg_binary=\"$ffmpeg_binary\"" "ffmpeg_binary=\"$answer\""
              printf "\\nFFmpeg binary successfully changed.\\n"
              exit 0
              ;;
            "RClone")
              printf "\\n\\nWhat do you want to set the RClone binary to?\\n"
              prompt_user "file"
              set_config "rclone_binary=\"$rclone_binary\"" "rclone_binary=\"$answer\""
              printf "\\nRClone binary successfully changed.\\n"
              exit 0
              ;;
            "Exit")
              printf "\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
              exit 0
              ;;
          esac
        done
        ;;
      "Codecs")
        printf "\\nWhich codec do you want to set?\\n"
        select option in "Audio" "Container" "Video" "Exit"
        do
          case "$option" in
            "Audio")
              printf "\\n\\nWhat do you want to set the audio codec to?\\n"
              var=$audio_codec
              prompt_user "audio"
              set_config "audio_codec=\"$var\"" "audio_codec=\"$audio_codec\""
              printf "\\nAudio codec successfully changed.\\n"
              exit 0
              ;;
            "Container")
              printf "\\n\\nWhat do you want to set the container to?\\n"
              var=$media_container
              prompt_user "container"
              set_config "media_container=\"$var\"" "media_container=\"$media_container\""
              printf "\\nMedia container successfully changed.\\n"
              exit 0
              ;;
            "Video")
              printf "\\n\\nWhat do you want to set the video codec to?\\n"
              var=$video_codec
              var2=$video_library
              prompt_user "video"
              set_config "video_codec=\"$var\"" "video_codec=\"$video_codec\""
              set_config "video_library=\"$var2\"" "video_library=\"$video_library\""
              printf "\\nVideo codec successfully changed.\\n"
              exit 0
              ;;
            "Exit")
              printf "\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
              exit 0
              ;;
          esac
        done
        ;;
      "Directories")
        printf "\\nWhich directory do you want to set?\\n"
        select option in "Convert" "Converted" "Media" "Mount" "Exit"
        do
          case "$option" in
            "Convert")
              printf "\\n\\nWhat do you want to set the convert directory to?\\n"
              prompt_user "directory"
              set_config "convert_dir=\"$convert_dir\"" "convert_dir=\"$answer\""
              printf "\\nConvert directory successfully changed.\\n"
              exit 0
              ;;
            "Converted")
              printf "\\n\\nWhat do you want to set the converted directory to?\\n"
              prompt_user "directory"
              set_config "converted_dir=\"$converted_dir\"" "converted_dir=\"$answer\""
              printf "\\nConverted directory successfully changed.\\n"
              exit 0
              ;;
            "Media")
              printf "\\n\\nWhat do you want to set the media directory to?\\n"
              prompt_user "directory"
              set_config "media_dir=\"$media_dir\"" "media_dir=\"$answer\""
              printf "\\nMedia directory successfully changed.\\n"
              exit 0
              ;;
            "Mount")
              printf "\\n\\nWhat do you want to set the mount directory to?\\n"
              prompt_user "directory"
              set_config "mount_dir=\"$mount_dir\"" "mount_dir=\"$answer\""
              printf "\\nMount directory successfully changed.\\n"
              exit 0
              ;;
            "Exit")
              printf "\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
              exit 0
              ;;
          esac
        done
        ;;
      "FFmpeg")
        printf "\\nWhich option do you want to set?\\n"
        select option in "CPU" "Force Overwrite" "Preset" "Exit"
        do
          case "$option" in
            "CPU")
              cpu_threads=`grep -c processor /proc/cpuinfo`
              printf "\\n\\nEnter a number between 1 - :\\n"
              while [ "$answer" -eq 0 ] ||  [ "$answer" -gt "$cpu_threads" ]; do
                prompt_user
              done
              set_config "ffmpeg_threads=\"$ffmpeg_threads\"" "ffmpeg_threads=\"$answer\""
              printf "\\nFFmpeg thread allocation successfully set.\\n"
              exit 0
              ;;
            "Force Overwrite")
              printf "\\n\\nEnter true or false: "

              while [ "$answer" != false ] || [ "$answer" != true ]; do
                prompt_user
              done
              set_config "force_overwrite=\"$force_overwrite\"" "force_overwrite=\"$anaswer\""
              printf "\\nForce overwrite successfully set.\\n"
              exit 0
              ;;
            "Preset")
              printf "\\n\\nEnter the desired FFmpeg preset: \\n"
              var=$ffmpeg_preset
              prompt_user "ffmpeg"
              set_config "ffmpeg_preset=\"$var\"" "ffmpeg_preset=\"$ffmpeg_preset\""
              printf "\\nFFmpeg preset successfully set.\\n"
              exit 0
              ;;
            "Exit")
              printf "\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
              exit 0
              ;;
          esac
        done
        ;;
      "Exit")
        printf "\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
        exit 0
        ;;
    esac
  done
}

function func_encode {
  if [ "$verbose" == "true" ]; then
    ffmpeg_verbose=""
  else
    ffmpeg_verbose="-loglevel quiet"
  fi

  if [ -n "$rclone_bwlimit" ]; then
    if ! [[ "$rclone_bwlimit" =~ ^[0-9]+$ ]]; then
      printf "You have not entered a valid number for --bwlimit (do not include KB).\\n"
      exit 0
    else
      rclone_bwlimit="--bwlimit $rclone_bwlimit"
    fi
  fi

  if [ ! -e "$list_file" ]; then
    printf "List file does not exist.\\nPlease manually specify a list file or run the list command to create one.\\n"
    exit 0
  fi

  while read line; do
    if [ -n "$line" ]; then
      DIRP=${line%/*}
      EXT=${line##*.}
      FILE=${line##*/}
      NAME=${FILE%.*}
      if [ "$remote_transfer" = true ]; then
        if [ -n "$rclone_remote" ]; then
          if [ "$dependency_rclone" = true ]; then
            printf "Downloading: $FILE\\n"
            if ! $rclone_binary copy "$rclone_remote$line" "$convert_dir" $rclone_bwlimit --stats-one-line -P
            then
              printf "\\n\e[31mError: File could not be downloaded.\\n\\n\e[0mMoving onto the next line.\\n\\n"
              /bin/sed -i 1d "$list_file"
              echo "$line" >> "$list_file"
              file_exists=0
            else
              printf "\\nFile downloaded."
              file_exists=1
            fi
          else
            printf "\\e[31mPlease install RClone to use an RClone remote with this command\\e[0m\\n"
            exit 0
          fi
        fi
      else
        if [ -f "$line" ]; then
          printf "Copying: $FILE\\n"
          /bin/cp "$line" "$convert_dir" & progress -mp $!
          printf "\\nFile copied."
          file_exists=1
        else
          printf "\\n\e[31mError: $line does not exist.\\n\\n\e[0mMoving onto the next line.\\n\\n"
          /bin/sed -i 1d "$list_file"
          echo "$line" >> "$list_file"
          file_exists=0
        fi
      fi

      if [ $file_exists -eq 1 ]; then
        exclude_stream=""
        file_audio_codec=`$ffprobe_binary -v error -select_streams a:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$convert_dir/$FILE"`
        file_video_codec=`$ffprobe_binary -v error -select_streams v:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$convert_dir/$FILE"`
        stream_count=`$ffprobe_binary -select_streams s -show_entries stream=index,codec_name -of csv=p=0 "$convert_dir/$FILE" |& grep -cE 'Subtitle: dvd_subtitle|Subtitle: hdmv_pgs' || :`
        if [ "$stream_count" -gt 0 ]; then
          stream_id=`$ffprobe_binary -select_streams s -show_entries stream=index,codec_name -of csv=p=0 "$convert_dir/$FILE" |& grep -E 'Subtitle: dvd_subtitle|Subtitle: hdmv_pgs' || :`
          if [ "$stream_count" = 1 ]; then
            exclude_stream=$(echo "$stream_id" | grep -oP '0:[0-9]{1,3}')
            exclude_stream="-map -$exclude_stream"
          else
            counter=0
            until [ "$counter" = "$stream_count" ]
            do
              counter=$((counter+1))
              excluded_stream="$(echo "$stream_id" |& grep -oP '0:[0-9]{1,3}' |& sed -n "${counter}"p)"
              if [ -n "$excluded_stream" ]; then
                if [ "$exclude_stream" = "*$excluded_stream*" ]; then
                  counter="$stream_count"
                else
                  exclude_stream="$exclude_stream -map -$excluded_stream"
                fi
              fi
              excluded_stream=""
            done
          fi
        fi
        printf "\\n\\nFile codecs:\\nAudio = $file_audio_codec\\nVideo = $file_video_codec\\n\\n"

        if [ -f "$converted_dir/$FILE" ]; then
          /bin/rm "$converted_dir/$FILE"
        fi

        if [ "$audio_codec" = "aac" ]; then
          if [ -n "`$ffmpeg_binary -encoders |& grep -i libfdk`" ]; then
            audio_codec="libfdk_aac"
            ffmpeg_error="\\nAn unknown error occurred with FFmpeg.\\n"
          else
            ffmpeg_error="\\nAn unknown error occurred with FFmpeg.\\nConsider installing the custom build of FFmpeg via the install command.\\n"
          fi
        fi

        codec_copy=false
        codecs=""
        options="-map 0 $exclude_stream -preset $ffmpeg_preset -max_muxing_queue_size 1024 -movflags faststart -threads 2"
        if [ -z "$audio_codec" ] || [ "$file_audio_codec" == "$audio_codec" ]; then
          codec_copy=true
          codecs="$codecs -c:a copy"
        else
          options="$codecs -c:a $audio_codec"
        fi

        if [ -z "$video_codec" ] || [ "$file_video_codec" == "$video_codec" ]; then
          codec_copy=true
          codecs="-c:v copy"
        else
          codecs="-c:v $video_library"
        fi

        if [ "$video_codec" == "h264" ]; then
          options="-crf 20 -level 4.1 $options"
        fi

        if ! $ffmpeg_binary -y -i "$convert_dir/$FILE" $codecs $options -nostdin $ffmpeg_verbose -stats "$converted_dir/$NAME.$media_container"; then
          if [ "$codec_copy" = true ]; then
            printf "\\n\\nAn unknown error occurred with FFmpeg.\\nTrying with full conversion instead.\\n\\n"
            if [ -n "$audio_codec" ]; then
              encode_audio_codec="$audio_codec"
            fi

            if ! $ffmpeg_binary -y -i "$convert_dir/$FILE" -c:v $video_library -c:a $encode_audio_codec $options -nostdin $ffmpeg_verbose -stats "$converted_dir/$NAME.$media_container"
            then
              printf "$ffmpeg_error"
              exit 0
            fi
          else
            printf "$ffmpeg_error"
            exit 0
          fi
        fi

        printf "\\nFile successfully converted."
        if [ -f "$convert_dir/$FILE" ]; then
          if [ -n "$rclone_remote" ]; then
            if [ "$force_overwrite" = true ]; then
              printf "\\nDeleting original file from RClone remote.\\n"
              $rclone_binary delete "$rclone_remote$line" $rclone_bwlimit --stats-one-line -P
              printf "\\nOriginal file deleted."
            else
              mv "$converted_dir/$NAME.$media_container" "$converted_dir/$NAME [Plexus Encode].$media_container"
              NAME="$NAME [Plexus Encode]"
              printf "\\nForce overwrite is disabled, new filename = $NAME.$media_container"
            fi
            printf "\\nUploading converted file to RClone remote.\\n"
            $rclone_binary move "$converted_dir/$NAME.$media_container" "$rclone_remote$DIRP" $rclone_bwlimit --stats-one-line -P
            printf "\\nFile successfully uploaded."
          else
            if [ "$force_overwrite" = true ]; then
              printf "\\nDeleting original file.\\n"
              /bin/rm "$line"
              printf "\\nOriginal file deleted."
            else
              mv "$converted_dir/$NAME.$media_container" "$converted_dir/$NAME [Plexus Encode].$media_container"
              NAME="$NAME [Plexus Encode]"
              printf "\\nForce overwrite is disabled, new filename = $NAME.$media_container"
            fi
            printf "\\nMoving converted file to the correct location.\\n"
            /bin/mv "$converted_dir/$NAME.$media_container" "$line" & progress -mp $!
            printf "\\nFile successfully moved."
          fi
          printf "\\nDeleting cached file and delisting it.\\n"
          /bin/rm "$convert_dir/$FILE"
          /bin/sed -i 1d "$list_file"
          printf "\\nOperation successfully completed.\\n"
        else
          printf "\\nFile codecs are already correct. Delisting it.\\n"
          /bin/sed -i 1d "$list_file"
          printf "\\nOperation successfully completed.\\n"
        fi
      else
        /bin/sed -i 1d "$list_file"
      fi
    fi
  done < "$list_file"
}

function func_help {
    printf "\\n\\e[37mUsage:\\n  plexus [flags]\\n  plexus [command]\\n\\nAvailable Commands:\\n  about           Learn more about the program\\n  config          Change the default variable values\\n  encode          Begin processing the encode queue\\n  help            Displays a list of available commands\\n  install         Reinstall Plexus or install any missing dependencies\\n  list            Build a .txt file containing media with incorrect codecs\\n  mount           Mount an RClone remote or cache, set from the config function\\n  unmount         Unmount an RClone remote or cache, set from the config function\\n\\nAdditional Information:\\n  Use 'plexus help command' to find out more about a specific command\\n"
}

function func_install {
  printf "\\nWhat would you like to do?\\n"
  select option in "Install missing dependencies" "Update Plexus" "Exit"
  do
    case "$option" in
      "Install missing dependencies")
        printf "\\nWhich dependency?\\n"
        select option in "All" "FFmpeg" "FFmpeg (custom)" "Fuse" "RClone" "Exit"
        do
          case "$option" in
            "All")
              printf "\\n\\e[36mInstalling all dependencies.\\e[0m\\n\\n"
              $packages install curl ffmpeg fuse progress unzip
              curl https://rclone.org/install.sh 2>/dev/null | sudo bash
              ;;
            "FFmpeg")
              printf "\\n\\e[36mInstalling FFmpeg.\\n\\n\\e[0m"
              if [ "$distro" == '"CentOS Linux"' ]; then
                $packages install epel-release
                $packages update
                $packages localinstall --nogpgcheck https://download1.rpmfusion.org/free/el/rpmfusion-free-release-7.noarch.rpm https://download1.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-7.noarch.rpm
                $packages install ffmpeg ffmpeg-devel
              else
                $packages install ffmpeg
              fi
              printf "\\e[32mFFmpeg has been installed!\\e[0m\\n"
              exit 0
              ;;
            "FFmpeg (custom)")
              printf "\\n\\e[36mInstalling FFmpeg (custom).\\nThis will take a few minutes as it's built from source with support for extended codecs\\n\\n\\e[0m"
              if [ "$distro" == '"CentOS Linux"' ]; then
                $packages install build-essential bzip2 curl gcc-c++ make perl which
                mkdir -p "$HOME/ffmpeg-build/packages/"
                curl -O ftp://ftp.videolan.org/pub/x264/snapshots/last_x264.tar.bz2
                tar xvjf last_x264.tar.bz2 -C "$HOME/ffmpeg-build/packages/"
              else
                $packages install build-essential curl g++ make perl
              fi
              curl https://raw.githubusercontent.com/markus-perl/ffmpeg-build-script/master/web-install.sh?v1 2>/dev/null | sudo bash
              printf "\\n\\nMoving FFmpeg into /usr/bin.\\n"
              sudo /bin/mv -f "$HOME/ffmpeg-build/workspace/bin/ffmpeg" "/usr/bin"
              printf "\\nRemoving FFmpeg build files.\\n"
              sudo /bin/rm -r "$HOME/ffmpeg-build"
              printf "\\n\\e[32mFFmpeg (custom) has been installed!\\e[0m\\n"
              exit 0
              ;;
            "Fuse")
              printf "\\n\\e[36mInstalling Fuse.\\n\\n\\e[0m"
              $packages install fuse
              printf "\\e[32mFuse has been installed!\\e[0m\\n"
              exit 0
              ;;
            "RClone")
              printf "\\n\\e[36mInstalling RClone.\\n\\n\\e[0m"
              $packages install curl unzip
              curl https://rclone.org/install.sh 2>/dev/null | sudo bash
              exit 0
              ;;
            "Exit")
              printf "\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
              exit 0
              ;;
          esac
        done
        ;;
      "Update Plexus")
        config_file="$HOME/.config/plexus/plexus.conf.bak"
        if [ -f "$config_file" ]; then
          i=1
          while [ -f "$config_file.$i" ]; do
              let i++
          done
          config_file="$config_file.$i"
        fi

        /bin/mv "$HOME/.config/plexus/plexus.conf" "$config_file"
        printf "\\n\\nYour current config file has been backed up ($config_file).\\n"
        curl https://plexus.robt.me/install.sh 2>/dev/null | sudo bash
        exit 0
        ;;
      "Exit")
        printf "\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
        exit 0
        ;;
    esac
  done
}

function func_list {
  printf "\\n\\e[32mAudio codec: $audio_codec\\nList file: $list_file\\nMedia container: $media_container\\nMedia directory: $media_dir\\nMount Path: $mount_dir\\nVideo codec: $video_codec\\n\\n\\e[0m"

  if [ ! -d "$media_dir" ]; then
    printf "\\e[31mThe specified media directory ($media_dir) does not exist.\\n\\e[0m"
    exit 0
  fi

  if [ -f "$list_file" ]; then
    printf "\\n\\e[93mThis will delete the current list file. Do you want to continue?\\n\\e[0m"
    select option in "Yes" "No"
    do
      case "$option" in
        "Yes")
          rm "$list_file"
          printf "\\n"
          break
          ;;
        "No")
          printf "\\nYou can find the current list file here: $list_file\\n"
          exit 0
          ;;
      esac
    done
  fi

  printf "\\e[32mScanning directory...\\n"
  while IFS= read -r line; do
    DIRP=${line%/*}
    EXT=${line##*.}
    FILE=${line##*/}
    NAME=${FILE%.*}
    printf "\\e[94mScanning: $line\\n"
  	file_audio_codec=`$ffprobe_binary -v error -select_streams a:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$line"`
  	file_video_codec=`$ffprobe_binary -v error -select_streams v:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$line"`

    if [ -n "$file_audio_codec" ] || [ -n "$file_video_codec" ] || [ -n "$EXT" ]; then
      if [ "$EXT" != "$media_container" ] || [ "$file_audio_codec" != "$audio_codec" ] || [ "$file_video_codec" != "$video_codec" ]; then
        printf "\\e[34mAdding: $line\\n"
        line=${line#"$mount_dir"}
        echo "$line" >> "$list_file"
      fi
    fi
    EXT=""
    file_audio_codec=""
    file_video_codec=""
  done < <(find "$media_dir" -name '*.avi' -or -name '*.flv' -or -name '*.mkv' -or -name '*.mov' -or -name '*.mp4' -or -name '*.ts' -or -name '*.mpg' -or -name '*.wmv')
  printf "\\e[32mScan complete! Run plexus encode to process the list.\\n\\e[0m"
}

function func_mount {
  printf "\\e[36mMounting RClone remote to $media_dir\\n\\e[0m"
  if ! $rclone_binary mount "$rclone_remote" "$media_dir" --allow-other --buffer-size 256M --dir-cache-time 72h --drive-chunk-size 32M --log-level INFO --log-file "$HOME"/.plexus/logs/rclone.log --timeout 1h --umask 002 --vfs-read-chunk-size 128M --vfs-read-chunk-size-limit off &
  then
    printf "\\nAn uknown error occurred (does the remote exist?)\\n\\e[0m"
  else
    printf "\\n\\e[32mThe RClone remote has successfully been mounted!\\n\\e[0m"
  fi
}

function func_unmount {
  if [ -d "$media_dir" ]; then
    printf "\\e[36mUnmounting RClone remote from $media_dir\\n\\e[0m"
    fusermount -uz "$media_dir"
    printf "\\n\\e[32mThe RClone remote has successfully been unmounted!\\n\\e[0m"
  else
    printf "\\e[31mThe directory does not exist.\\n\\e[0m"
  fi
}

if [ -z "$1" ]; then
  printf "$HEADER_TEXT"
  func_help
  exit 0
fi
command=$1
subcommand=$2
shift
printf "$HEADER_TEXT"
case "$command" in
  about)
    func_about
    ;;
  config)
    func_config
    ;;
    encode)
      while getopts ":a:fl:p:r:v:-:" opt; do
        case $opt in
          a)
            if [ -z ${OPTARG,,} ]; then
              if [ -z "$video_codec" ]; then
                printf "\\n\\e[31mYou've specified no audio or video codec, please specify at least one\\n"
                exit 0
              else
                printf "\\n\\e[93mYou've specified no audio codec, enabling video-only mode"
                encode_audio_codec="$audio_codec"
                audio_codec=""
              fi
            else
              check_variable audio ${OPTARG,,}
              if [ $audio_codec = "null" ]; then
                printf "You have not entered a supported audio codec.\\n"
                exit 0
              fi
            fi
            ;;
          c)
            if [ -n "${OPTARG,,}" ]; then
              check_variable container "${OPTARG,,}"
              if [ $media_container = "null" ]; then
                printf "You have not entered a supported media container.\\n"
                exit 0
              fi
            fi
            ;;
          f)
            force_overwrite="true"
            ;;
          l)
            if [ -f "$OPTARG" ]; then
              list_file="$OPTARG"
            else
              printf "You have not entered a valid list file.\\n"
              exit 1
            fi
            ;;
          p)
            check_variable ffmpeg_preset ${OPTARG,,}
            if [ $ffmpeg_preset = "null" ]; then
              printf "You have not entered a valid ffmpeg preset.\\n"
              exit 0
            fi
            ;;
          r)
            $rclone_binary listremotes > $HOME/.plexus/rclone/remotes.txt
            if [ ! -z "$(grep "$OPTARG" "$HOME/.plexus/rclone/remotes.txt")" ]; then
              if [ "${OPTARG: -1}" == ":" ]; then
                  rclone_remote="$OPTARG"
              else
                  rclone_remote="$OPTARG:"
              fi
              remote_transfer=true
            else
              printf "You have not entered a valid remote.\\n"
              exit 0
            fi
            ;;
          v)
            if [ -z ${OPTARG,,} ]; then
              if [ -z "$audio_codec" ]; then
                printf "\\n\\e[31mYou've specified no audio or video codec, please specify at least one\\n"
                exit 0
              else
                printf "\\n\\e[93mYou've specified no video codec, enabling audio-only mode"
                video_codec=""
              fi
            else
              check_variable video ${OPTARG,,}
              if [ $video_codec = "null" ]; then
                printf "You have not entered a supported video codec.\\n"
                exit 0
              fi
            fi
            ;;
          -)
            val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
            case ${OPTARG} in
              "bwlimit"*)
                rclone_bwlimit="$val"
                ;;
              "verbose"*)
                verbose="true"
                ;;
            esac
            ;;
          \?)
            echo "Invalid option: -$OPTARG." >&2
            exit 1
            ;;
          :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
        esac
      done
      if [ $OPTIND -eq 1 ]; then
        printf "\\n\\e[39mUsage:\\n  plexus encode -l /path/to/list.txt [flags]\\n  plexus encode -l /path/to/list.txt -r RCloneRemote: [flags]\\n\\nFlags:\\n  -a              Audio codec. Default = $audio_codec\\n  -c              Media container. Default = $media_container\\n  -f              Force overwrite. Default = $force_overwrite\\n  -l              List location. Default = $list_file\\n  -p              FFMpeg preset. Default = $ffmpeg_preset\\n  -r              RClone remote. Use this for RClone integration\\n  -v              Video codec. Default = $video_codec\\n  --bwlimit       Limit RClone's active connection speed\\n  --verbose       Show detailed log\\n"
        exit 0
      fi
      if [ ! -z "$list_file" ]; then
        if [ $dependency_ffmpeg = true ]; then
          func_encode
        else
          printf "\\e[31mPlease install ffmpeg to use this command\\e[0m\\n"
          exit 0
        fi
      else
        printf "You must specify a list file.\\n"
      fi
      shift $((OPTIND -1))
      ;;
  help)
    case "${subcommand,,}" in
      "about")
        printf "This command tells you more about it's creation.\\n"
        ;;
      "encode")
        printf "\n\\e[39mAbout:\\n  The encode command processes a list generated from the list\\n  command and converts each listed file into two proposed codecs\\n  (set to H264 and AAC by default)\\n\\nUsage:\\n  plexus encode -l /path/to/list.txt [flags]\\n  plexus encode -l /path/to/list.txt -r RCloneRemote: [flags]\\n\\nFlags:\\n  -a              Audio codec. Default = $audio_codec\\n                  This allows you to set a preferred audio codec\\n                  on runtime, rather than setting a default via\\n                  the config function\\n\\n  -f              Force overwrite. Default = $force_overwrite\\n                  The newly encoded file will overwrite the\\n                  existing file\\n\\n  -l              List location. Default = $list_file\\n                  This is where your previously generated list file\\n                  is\\n\\n  -p              FFMpeg preset. Default = $ffmpeg_preset\\n                  This is the FFmpeg preset that will be used when\\n                  encoding your media\\n\\n  -r              RClone remote. Use this for RClone integration\\n                  Don't use this if you're converting local media.\\n                  This points Plexus to your pre-configured RClone\\n                  remote\\n\\n  -v              Video codec. Default = $video_codec\\n                  This allows you to set a preferred video codec\\n                  on runtime, rather than setting a default via\\n                  the config function\\n\\n  --bwlimit       Limit RClone's active connection speed\\n                  To prevent using too much bandwidth, you can\\n                  set an active limit in KB/s\\n\\n  --verbose       Show detailed log\\n                  Shows you a more detailed log of what's happening.\\n                  Use this when expriencing issues\\n"
        ;;
      *)
        func_help
        ;;
    esac
    ;;
  install)
    func_install
    shift $((OPTIND -1))
    ;;
  list)
    while getopts ":a:c:d:l:m:v:" opt; do
      case $opt in
        a)
          if [ -z "${OPTARG,,}" ]; then
            if [ -z "$video_codec" ]; then
              printf "\\n\\e[31mYou've specified no audio or video codec, please specify at least one\\n"
              exit 0
            else
              printf "\\n\\e[93mYou've specified no audio codec, enabling video-only mode"
              audio_codec=""
            fi
          else
            check_variable audio "${OPTARG,,}"
            if [ $audio_codec = "null" ]; then
              printf "You have not entered a supported audio codec.\\n"
              exit 0
            fi
          fi
          ;;
        c)
          if [ -n "${OPTARG,,}" ]; then
            check_variable container "${OPTARG,,}"
            if [ $media_container = "null" ]; then
              printf "You have not entered a supported media container.\\n"
              exit 0
            fi
          fi
          ;;
        d)
          if [ -d "$OPTARG" ]; then
              if [ "${OPTARG: -1}" == "/" ]; then
                  media_dir="${OPTARG::-1}"
              else
                  media_dir="$OPTARG"
              fi
          else
              printf "You have not entered a valid directory.\\n"
              exit 1
          fi
          ;;
        l)
          list_file="$OPTARG"
          list_dir=$(dirname "${list_file}")

          if [ ! -d "$list_dir" ]; then
              printf "You have not entered a valid list directory.\\n"
              exit 1
          fi
          ;;
        m)
          mount_dir="$OPTARG"

          if [ ! -d "$mount_dir" ]; then
              printf "You have not entered a valid mount directory.\\n"
              exit 1
          fi
          ;;
        v)
          if [ -z "${OPTARG,,}" ]; then
            if [ -z "$audio_codec" ]; then
              printf "\\n\\e[31mYou've specified no audio or video codec, please specify at least one\\n"
              exit 0
            else
              printf "\\n\\e[93mYou've specified no video codec, enabling audio-only mode"
              video_codec=""
            fi
          else
            check_variable video "${OPTARG,,}"
            if [ $video_codec = "null" ]; then
              printf "You have not entered a supported video codec.\\n"
              exit 0
            fi
          fi
          ;;
        \?)
          printf "Invalid option: -$OPTARG.\\n"
          exit 1
          ;;
        :)
          printf "Option -$OPTARG requires an argument.\\n"
          exit 1
          ;;
      esac
    done
    if [ $OPTIND -eq 1 ]; then
      printf "\\n\\e[39mUsage:\\n  plexus list -d /path/to/media [flags]\\n\\nFlags:\\n  -a              Audio codec. Default = $audio_codec\\n  -c              Media container. Default = $media_container\\n  -d              Media directory. Default = $media_dir\\n  -l              List location. Default = $list_file\\n  -m              Mount path, used for RClone. Removed from the beginning of each list line\\n  -v              Video codec. Default = $video_codec\\n"
      exit 0
    fi
    func_list
    shift $((OPTIND -1))
    ;;
  mount)
    if [ $dependency_fuse = true ]; then
      while getopts ":r:" opt; do
        case $opt in
          r)
            if [ "${OPTARG: -1}" == ":" ]; then
                rclone_remote="$OPTARG"
            else
                rclone_remote="$OPTARG:"
            fi
            ;;
          \?)
            printf "Invalid option: -$OPTARG.\\n"
            exit 1
            ;;
          :)
            printf "Option -$OPTARG requires an argument.\\n"
            exit 1
            ;;
        esac
      done
      if [ $OPTIND -eq 1 ]; then
        printf "\\e[39mUsage:\\n  plexus mount -r RCloneRemote:\\n\\nFlags:\\n  -r              RClone remote. Setup via rclone config\\n"
        exit 0
      fi
      func_mount
      shift $((OPTIND -1))
    else
      printf "\\e[31mPlease install fuse to use this command\\e[0m\\n"
      exit 0
    fi
    ;;
  unmount)
    if [ $dependency_fuse = true ]; then
      while getopts ":d:" opt; do
        case $opt in
          d)
            media_dir=$OPTARG
            ;;
          \?)
            printf "Invalid option: -$OPTARG.\\n"
            exit 1
            ;;
          :)
            printf "Option -$OPTARG requires an argument.\\n"
            exit 1
            ;;
        esac
      done
      if [ $OPTIND -eq 1 ]; then
        printf "\\e[39mUsage:\\n  plexus unmount -d /path/to/mounted/media/\\n\\nFlags:\\n  -d              Media directory.\\n"
        exit 0
      fi
      func_unmount
      shift $((OPTIND -1))
    else
      printf "\\e[31mPlease install fuse to use this command\\e[0m\\n"
      exit 0
    fi
    ;;
  *)
    printf "This is not a valid command.\\nSee 'plexus help' for more information.\\n"
    exit 0
    ;;
esac
### COMMAND HANDLER ###

main "$@"
