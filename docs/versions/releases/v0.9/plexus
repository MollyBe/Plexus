#!/usr/bin/env bash
HEADER_TEXT="\\e[93m=== Plexus v0.9.35 - https://github.com/Wolveix/Plexus ===\\e[0m\\n"
set -e
if [ -f "$HOME"/.config/plexus/plexus.conf ]
then
  source "$HOME"/.config/plexus/plexus.conf
  if [ -z "$audio_codec" ] || [ -z "$convert_dir" ] || [ -z "$converted_dir" ] || [ -z "$ffmpeg_binary" ] || [ -z "$ffmpeg_threads" ] || [ -z "$ffmpeg_preset" ] || [ -z "$ffprobe_binary" ] || [ -z "$force_overwrite" ] || [ -z "$list_file" ] || [ -z "$media_container" ] || [ -z "$media_dir" ] || [ -z "$video_codec" ] || [ -z "$video_library" ]
  then
    printf "Your config file ($HOME/.config/plexus/plexus.conf) is missing required parameters.\\nMove or delete it and then run Plexus again.\\n"
    exit 0
  fi
else
  mkdir -p "$HOME"/.config/plexus/
  curl -O https://plexus.robt.me/versions/releases/latest/plexus.conf 2>/dev/null
  mv plexus.conf "$HOME"/.config/plexus/
  printf "\\e[32mA config file could not be found. The default file has been downloaded.\\n"
fi

if [ "$(dpkg-query -W -f='${Status}' ffmpeg 2>/dev/null | grep -c "ok installed")" -eq 1 ]
then
  dependency_ffmpeg=true
else
  dependency_ffmpeg=false
fi

if [ "$(dpkg-query -W -f='${Status}' fuse 2>/dev/null | grep -c "ok installed")" -eq 1 ]
then
  dependency_fuse=true
else
  dependency_fuse=false
fi

if [ -f "$HOME/.config/rclone/rclone.conf" ]
then
  dependency_rclone=true
else
  dependency_rclone=false
fi

function main () {
  VERBOSE=6
  declare -A LOG_LEVELS
  LOG_LEVELS=([0]="emerg" [1]="alert" [2]="crit" [3]="err" [4]="warning" [5]="notice" [6]="info" [7]="debug")
  function .log () {
    local LEVEL=${1}
    shift
    if [ "${VERBOSE}" -ge "${LEVEL}" ]; then
      echo "[${LOG_LEVELS[$LEVEL]}]" "$@"
    fi
  }
}

function check_variable {
  case $1 in
    "audio")
      case ${2,,} in
        "" | "default" | "aac")
            audio_codec="aac"
            ;;
        "ac3" | "ac-3" | "atsc")
            audio_codec="ac3"
            ;;
        "dca" | "dts")
            audio_codec="dts"
            ;;
        "flac")
            audio_codec="flac"
            ;;
        "mp3" | "mpeg3")
            audio_codec="mp3"
            ;;
        "opus")
            audio_codec="opus"
            ;;
        *)
            audio_codec="null"
            ;;
      esac
      ;;
    "container")
      case ${2,,} in
        "avi")
          media_container="avi"
          ;;
        "mkv")
          media_container="mkv"
          ;;
        "mp4")
          media_container="mp4"
          ;;
        "wmv")
          media_container="wmv"
          ;;
        *)
          media_container="null"
          ;;
      esac
      ;;
    "ffmpeg_preset")
      case ${2,,} in
        "ultrafast" | "superfast" | "faster" | "fast" | "medium" | "slow" | "slower" | "veryslow" | "placebo")
          ffmpeg_preset="$2"
          ;;
        "" | "default" | "veryfast")
          ffmpeg_preset="veryfast"
          ;;
        *)
          ffmpeg_preset="null"
          ;;
      esac
      ;;
    "video")
      case ${2,,} in
        "" | "default" | "x264" | "h.264" | "h264" | "avc" | "libx264")
            video_codec="h264"
            video_library="libx264"
            ;;
        "x265" | "h.265" | "h265" | "hevc" | "libx265")
            video_codec="h265"
            video_library="libx265"
            ;;
        "avi" | "divx" | "libxvid" | "mpeg4" | "mpeg-4" | "xvid")
            video_codec="mpeg4"
            video_library="libxvid"
            ;;
        *)
            video_codec="null"
            video_library="null"
            ;;
      esac
      ;;
    *)
      printf "\\e[31m\\nAn unexpected error has occurred.\\e[0m\\n"
      exit 0
      ;;
  esac
}

function func_about {
    printf "\\nPlexus is a suite of easy-to-use tools to help manage your media\\ncollection. You can build a list of the media in your collection\\nwhich is incorrectly encoded, and then re-encode all of that media\\nautomatically. Plexus also integrates smoothly with RClone.\\n\\nI created this suite because I knew that I would need a simple CLI\\nsolution to re-encoding all of my media at some point in the future,\\nand no other solution met my requirements.\\n\\nThank you to Mason Rowe for the advice and starting scripts.\\n\\n- Robert Thomas\\n  Managing Director & Lead Software Developer at Arcruy.\\n  https://github.com/Wolveix/Plexus\\n"
}

function func_config {
    printf "\\nUse this tool to set the default values without modifying the config file directly.\\n\\n1. Set binaries (FFmpeg, FFprobe, RClone)\\n2. Set codecs (audio, container, video)\\n3. Set directories (convert, converted, media, mount)\\n4. Set FFmpeg options (CPU threads, force overwrite, preset)\\n5. Set list file location\\n0. Exit\\n\\n"
    answer="waiting"
    while [ ! -z $answer ]
    do
        read -r -n 1 -p '' answer
        case $answer in
        "1")
            printf "\\n\\nEnter the desired binary:\\n1. FFmpeg\\n2. FFprobe\\n3. RClone\\n0. Exit\\n\\n"
            answer="waiting"
            while [ ! -z $answer ]
            do
                read -r -n 1 -p '' answer
                case $answer in
                "1")
                    printf "\\n\\nEnter the desired FFmpeg binary: "
                    answer="waiting"
                    while [ ! -z $answer ]
                    do
                        read -r -p '' answer
                        if [ -f "$answer" ]
                        then
                            sed -i '/ffmpeg_binary/d' "$HOME"/.config/plexus/plexus.conf
                            echo ffmpeg_binary=\"$answer\" >> "$HOME"/.config/plexus/plexus.conf
                            printf "\\nFFmpeg binary successfully changed.\\n"
                            exit 0
                        else
                            printf "\\nYou have not entered a valid file.\\n"
                        fi
                    done
                    ;;
                "2")
                    printf "\\n\\nEnter the desired FFprobe binary: "
                    answer="waiting"
                    while [ ! -z $answer ]
                    do
                        read -r -p '' answer
                        if [ -f "$answer" ]
                        then
                            sed -i '/ffprobe_binary/d' "$HOME"/.config/plexus/plexus.conf
                            echo ffprobe_binary=\"$answer\" >> "$HOME"/.config/plexus/plexus.conf
                            printf "\\nFFprobe binary successfully changed.\\n"
                            exit 0
                        else
                            printf "\\nYou have not entered a valid file.\\n"
                        fi
                    done
                    ;;
                "3")
                    printf "\\n\\nEnter the desired RClone binary: "
                    answer="waiting"
                    while [ ! -z $answer ]
                    do
                        read -r -p '' answer
                        if [ -f "$answer" ]
                        then
                            sed -i '/rclone_binary/d' "$HOME"/.config/plexus/plexus.conf
                            echo rclone_binary=\"$answer\" >> "$HOME"/.config/plexus/plexus.conf
                            printf "\\nRClone binary successfully changed.\\n"
                            exit 0
                        else
                            printf "\\nYou have not entered a valid file.\\n"
                        fi
                    done
                    ;;
                "0")
                    printf "\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
                    exit 4
                    ;;
                *)
                    answer="invalid"
                    printf "\\nPlease enter a valid menu option. Enter 0 to exit.\\n"
                    ;;
                esac
            done
            ;;
        "2")
            printf "\\n\\nEnter the desired codec:\\n1. Audio\\n2. Container\\n3. Video\\n0. Exit\\n\\n"
            answer="waiting"
            while [ ! -z $answer ]
            do
                read -r -n 1 -p '' answer
                case $answer in
                "1")
                    printf "\\n\\nEnter the desired audio codec: "
                    answer="waiting"
                    while [ ! -z $answer ]
                    do
                        audio_codec="null"
                        read -r -p '' answer
                        check_variable audio "$answer"
                        while [ $audio_codec = "null" ]
                        do
                            printf "\\nYou have not entered a supported codec.\\n"
                            read -r -p '' answer
                            check_variable audio "$answer"
                        done
                        sed -i '/audio_codec/d' "$HOME"/.config/plexus/plexus.conf
                        echo audio_codec=\"$audio_codec\" >> "$HOME"/.config/plexus/plexus.conf

                        printf "\\nAudio codec successfully changed.\\n"
                        exit 0
                    done
                    ;;
                "2")
                    printf "\\n\\nEnter the desired media container: "
                    answer="waiting"
                    while [ ! -z $answer ]
                    do
                        media_container="null"
                        read -r -p '' answer
                        check_variable container "$answer"
                        while [ $media_container = "null" ]
                        do
                            printf "\\nYou have not entered a supported container.\\n"
                            read -r -p '' answer
                            check_variable container "$answer"
                        done
                        sed -i '/media_container/d' "$HOME"/.config/plexus/plexus.conf
                        echo media_container=\"$media_container\" >> "$HOME"/.config/plexus/plexus.conf
                        sed -i '/media_container/d' "$HOME"/.config/plexus/plexus.conf
                        echo media_container=\"$media_container\" >> "$HOME"/.config/plexus/plexus.conf

                        printf "\\nMedia container successfully changed.\\n"
                        exit 0
                    done
                    ;;
                "3")
                    printf "\\n\\nEnter the desired video codec: "
                    answer="waiting"
                    while [ ! -z $answer ]
                    do
                        video_codec="null"
                        read -r -p '' answer
                        check_variable video "$answer"
                        while [ $video_codec = "null" ]
                        do
                            printf "\\nYou have not entered a supported codec.\\n"
                            read -r -p '' answer
                            check_variable video "$answer"
                        done
                        sed -i '/video_codec/d' "$HOME"/.config/plexus/plexus.conf
                        echo video_codec=\"$video_codec\" >> "$HOME"/.config/plexus/plexus.conf
                        sed -i '/video_library/d' "$HOME"/.config/plexus/plexus.conf
                        echo video_library=\"$video_library\" >> "$HOME"/.config/plexus/plexus.conf

                        printf "\\nVideo codec successfully changed.\\n"
                        exit 0
                    done
                    ;;
                "0")
                    printf "\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
                    exit 4
                    ;;
                *)
                    answer="invalid"
                    printf "\\nPlease enter a valid menu option. Enter 0 to exit.\\n"
                    ;;
                esac
            done
            ;;
        "3")
            printf "\\n\\nEnter the desired directory:\\n1. Convert directory\\n2. Converted directory\\n3. Media directory\\n4. Mount directory\\n0. Exit\\n\\n"
            answer="waiting"
            while [ ! -z $answer ]
            do
                read -r -n 1 -p '' answer
                case $answer in
                "1")
                    printf "\\n\\nEnter the desired convert directory: "
                    answer="waiting"
                    while [ ! -z $answer ]
                    do
                        read -r -p '' answer
                        if [ -d "$answer" ]
                        then
                            if [ "${answer: -1}" == "/" ]
                            then
                                convert_dir="${answer::-1}"
                                sed -i '/convert_dir/d' "$HOME"/.config/plexus/plexus.conf
                                echo convert_dir=\"$convert_dir\" >> "$HOME"/.config/plexus/plexus.conf
                            else
                                convert_dir="$answer"
                                sed -i '/convert_dir/d' "$HOME"/.config/plexus/plexus.conf
                                echo convert_dir=\"$convert_dir\" >> "$HOME"/.config/plexus/plexus.conf
                            fi
                            printf "\\nConvert directory successfully changed.\\n"
                            exit 0
                        else
                            printf "\\nYou have not entered a valid directory.\\n"
                        fi
                    done
                    ;;
                "2")
                    printf "\\n\\nEnter the desired converted directory: "
                    answer="waiting"
                    while [ ! -z $answer ]
                    do
                        read -r -p '' answer
                        if [ -d "$answer" ]
                        then
                            if [ "${answer: -1}" == "/" ]
                            then
                                converted_dir="${answer::-1}"
                                sed -i '/converted_dir/d' "$HOME"/.config/plexus/plexus.conf
                                echo converted_dir=\"$convert_dir\" >> "$HOME"/.config/plexus/plexus.conf
                            else
                                converted_dir="$answer"
                                sed -i '/converted_dir/d' "$HOME"/.config/plexus/plexus.conf
                                echo converted_dir=\"$convert_dir\" >> "$HOME"/.config/plexus/plexus.conf
                            fi
                            printf "\\nConverted directory successfully changed.\\n"
                            exit 0
                        else
                            answer="invalid"
                            printf "You have not entered a valid directory.\\n"
                        fi
                    done
                    ;;
                "3")
                    printf "\\n\\nEnter the desired media directory: "
                    answer="waiting"
                    while [ ! -z $answer ]
                    do
                        read -r -p '' answer
                        if [ -d "$answer" ]
                        then
                            if [ "${answer: -1}" == "/" ]
                            then
                                media_dir="${answer::-1}"
                                sed -i '/media_dir/d' "$HOME"/.config/plexus/plexus.conf
                                echo media_dir=\"$media_dir\" >> "$HOME"/.config/plexus/plexus.conf
                            else
                                media_dir="$answer"
                                sed -i '/media_dir/d' "$HOME"/.config/plexus/plexus.conf
                                echo media_dir=\"$media_dir\" >> "$HOME"/.config/plexus/plexus.conf
                            fi
                            printf "\\nMedia directory successfully changed.\\n"
                            exit 0
                        else
                            answer="invalid"
                            printf "You have not entered a valid directory.\\n"
                        fi
                    done
                    ;;
                "4")
                    printf "\\n\\nEnter the desired mount directory: "
                    answer="waiting"
                    while [ ! -z $answer ]
                    do
                        read -r -p '' answer
                        if [ -d "$answer" ]
                        then
                            if [ "${answer: -1}" == "/" ]
                            then
                                mount_dir="${answer::-1}"
                                sed -i '/mount_dir/d' "$HOME"/.config/plexus/plexus.conf
                                echo mount_dir=\"$mount_dir\" >> "$HOME"/.config/plexus/plexus.conf
                            else
                                mount_dir="$answer"
                                sed -i '/mount_dir/d' "$HOME"/.config/plexus/plexus.conf
                                echo mount_dir=\"$mount_dir\" >> "$HOME"/.config/plexus/plexus.conf
                            fi
                            printf "\\nMount directory successfully changed.\\n"
                            exit 0
                        else
                            answer="invalid"
                            printf "You have not entered a valid directory.\\n"
                        fi
                    done
                    ;;
                "0")
                    printf "\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
                    exit 4
                    ;;
                *)
                    answer="invalid"
                    printf "\\nPlease enter a valid menu option. Enter 0 to exit.\\n"
                    ;;
                esac
            done
            ;;
        "4")
            printf "\\n\\nEnter the desired option:\\n1. CPU threads\\n2. Force overwrite\\n3. Preset\\n0. Exit\\n\\n"
            answer="waiting"
            while [ ! -z $answer ]
            do
                read -r -n 1 -p '' answer
                case $answer in
                "1")
                    cpu_count=`grep -c processor /proc/cpuinfo`
                    printf "\\n\\nEnter a number between 1 - $cpu_count: "
                    answer="waiting"
                    while [ ! -z $answer ]
                    do
                        read -r -p '' answer
                        if ! [[ "$answer" =~ ^[0-9]+$ ]]
                        then
                          printf "\\nYou have not entered a valid number.\\n"
                        else
                          if [ "$answer" -gt $cpu_count ] || [ "$answer" -lt 1 ]
                          then
                            printf "\\nYou have not entered a valid number (the value must be less than or equal to your total logical cores).\\n"
                          else
                            sed -i '/ffmpeg_threads/d' "$HOME"/.config/plexus/plexus.conf
                            echo ffmpeg_threads=\"$answer\" >> "$HOME"/.config/plexus/plexus.conf

                            printf "\\nFFmpeg thread allocation successfully changed.\\n"
                            exit 0
                          fi
                        fi
                    done
                    ;;
                "2")
                    printf "\\n\\nEnter true or false: "
                    answer="waiting"
                    while [ ! -z $answer ]
                    do
                        read -r -p '' answer
                        if [ $answer = false ] || [ $answer = true ]
                        then
                          sed -i '/force_overwrite/d' "$HOME"/.config/plexus/plexus.conf
                          echo force_overwrite=\"$answer\" >> "$HOME"/.config/plexus/plexus.conf

                          printf "\\nForce overwrite successfully changed.\\n"
                          exit 0
                        else
                          printf "\\nYou have not entered a valid option.\\n"
                        fi
                    done
                    ;;
                "3")
                    printf "\\n\\nEnter the desired FFmpeg preset: "
                    answer="waiting"
                    while [ ! -z $answer ]
                    do
                        ffmpeg_preset="null"
                        read -r -p '' answer
                        check_variable ffmpeg_preset "$answer"
                        while [ $ffmpeg_preset = "null" ]
                        do
                            printf "\\nYou have not entered a valid FFmpeg preset.\\n"
                            read -r -p '' answer
                            check_variable ffmpeg_preset "$answer"
                        done
                        sed -i '/ffmpeg_preset/d' "$HOME"/.config/plexus/plexus.conf
                        echo ffmpeg_preset=\"$ffmpeg_preset\" >> "$HOME"/.config/plexus/plexus.conf

                        printf "\\nFFmpeg preset successfully changed.\\n"
                        exit 0
                    done
                    ;;
                "0")
                    printf "\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
                    exit 4
                    ;;
                *)
                    answer="invalid"
                    printf "\\nPlease enter a valid menu option. Enter 0 to exit.\\n"
                    ;;
                esac
            done
            ;;
        "5")
            printf "\\n\\nEnter the desired list file: "
            answer="waiting"
            while [ ! -z $answer ]
            do
                read -r -p '' answer
                if [ -f "$answer" ]
                then
                    sed -i '/list_file/d' "$HOME"/.config/plexus/plexus.conf
                    echo list_file=\"$answer\" >> "$HOME"/.config/plexus/plexus.conf
                    printf "\\nList file successfully changed.\\n"
                    exit 0
                else
                    printf "\\nYou have not entered a valid list file.\\n"
                fi
            done
            ;;
        "0")
            printf "\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
            exit 4
            ;;
        *)
            answer="invalid"
            printf "\\nPlease enter a valid menu option. Enter 0 to exit.\\n"
            ;;
        esac
    done
}

function func_encode {
  if [ "$verbose" == "true" ]
  then
    ffmpeg_verbose=""
  else
    ffmpeg_verbose="-loglevel quiet"
  fi

  if [ ! -z "$rclone_bwlimit" ]
  then
    if ! [[ "$rclone_bwlimit" =~ ^[0-9]+$ ]]
    then
      printf "You have not entered a valid number for --bwlimit (do not include KB).\\n"
      exit 0
    else
      rclone_bwlimit="--bwlimit $rclone_bwlimit"
    fi
  fi

  if [ ! -e "$list_file" ]
  then
    printf "List file does not exist.\\nPlease manually specify a list file or run the list command to create one.\\n"
    exit 0
  fi

  while read line; do
    if [ -n "$line" ]
    then
      DIRP=${line%/*}
      FILE=${line##*/}
      NAME=${FILE%.*}
      if [ "$remote_transfer" = true ]
      then
        if [ ! -z "$rclone_remote" ]
        then
          if [ "$dependency_rclone" = true ]
          then
            printf "Downloading: $FILE\\n"
            $rclone_binary copy "$rclone_remote$line" "$convert_dir" $rclone_bwlimit --stats-log-level NOTICE --stats 30s
            printf "\\nFile downloaded."
          else
            printf "\\e[31mPlease install RClone to use an RClone remote with this command\\e[0m\\n"
            exit 0
          fi
        fi
      else
        if [ -f "$line" ]
        then
          printf "Copying: $FILE\\n"
          /bin/cp "$line" "$convert_dir"
          printf "\\nFile copied."
        else
          printf "Error: $line does not exist.\\n"
          exit 0
        fi
      fi

      exclude_stream=""
      file_audio_codec=`$ffprobe_binary -v error -select_streams a:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$convert_dir/$FILE"`
      file_video_codec=`$ffprobe_binary -v error -select_streams v:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$convert_dir/$FILE"`
      stream_count=`$ffprobe_binary -select_streams s -show_entries stream=index,codec_name -of csv=p=0 "$convert_dir/$FILE" |& grep -cE 'Subtitle: dvd_subtitle|Subtitle: hdmv_pgs' || :`
      if [ "$stream_count" -gt 0 ]
      then
        stream_id=`$ffprobe_binary -select_streams s -show_entries stream=index,codec_name -of csv=p=0 "$convert_dir/$FILE" |& grep -E 'Subtitle: dvd_subtitle|Subtitle: hdmv_pgs' || :`
        if [ "$stream_count" = 1 ]
        then
          exclude_stream=$(echo "$stream_id" | grep -oP '0:[0-9]{1,3}')
          exclude_stream="-map -$exclude_stream"
        else
          counter=0
          until [ "$counter" = "$stream_count" ]
          do
            counter=$((counter+1))
            excluded_stream="$(echo "$stream_id" |& grep -oP '0:[0-9]{1,3}' |& sed -n "${counter}"p)"
            if [ ! -z "$excluded_stream" ]
            then
              if [ "$exclude_stream" = "*$excluded_stream*" ]
              then
                counter="$stream_count"
              else
                exclude_stream="$exclude_stream -map -$excluded_stream"
              fi
            fi
            excluded_stream=""
          done
        fi
      fi
      printf "\\n\\nFile codecs:\\nAudio = $file_audio_codec\\nVideo = $file_video_codec\\n\\n"

      if [ -f "$converted_dir/$FILE" ]
      then
        /bin/rm "$converted_dir/$FILE"
      fi

      if [ "$audio_codec" = "aac" ]
      then
        if [ ! -z "`$ffmpeg_binary -encoders |& grep -i libfdk`" ]
        then
          audio_codec="libfdk_aac"
          ffmpeg_error="\\nAn unknown error occurred with FFmpeg.\\n"
        else
          ffmpeg_error="\\nAn unknown error occurred with FFmpeg.\\nConsider installing the custom build of FFmpeg via the install command.\\n"
        fi
      fi

      codec_copy=false
      codecs=""
      options="-map 0 $exclude_stream -preset $ffmpeg_preset -max_muxing_queue_size 1024 -movflags faststart -threads 2"
      if [ "$file_video_codec" == "$video_codec" ]
      then
        codec_copy=true
        codecs="-c:v copy"
      else
        codecs="-c:v $video_library"
      fi

      if [ "$file_audio_codec" == "$audio_codec" ]
      then
        codec_copy=true
        codecs="$codecs -c:a copy"
      else
        options="$codecs -c:a $audio_codec"
      fi

      if [ "$video_codec" == "h264" ]
      then
        options="-crf 20 -level 4.1 $options"
      fi

      if ! $ffmpeg_binary -y -i "$convert_dir/$FILE" $codecs $options -nostdin $ffmpeg_verbose -stats "$converted_dir/$NAME.$media_container"
      then
        if [ "$codec_copy" = true ]
        then
          printf "\\n\\nAn unknown error occurred with FFmpeg.\\nTrying with full conversion instead.\\n\\n"
          if ! $ffmpeg_binary -y -i "$convert_dir/$FILE" -c:v $video_library -c:a $audio_codec $options -nostdin $ffmpeg_verbose -stats "$converted_dir/$NAME.$media_container"
          then
            printf "$ffmpeg_error"
            exit 0
          fi
        else
          printf "$ffmpeg_error"
          exit 0
        fi
      fi

      printf "\\nFile successfully converted."
      if [ -f "$convert_dir/$FILE" ]
      then
        if [ ! -z "$rclone_remote" ]
        then
          if [ "$force_overwrite" = true ]
          then
            printf "\\nDeleting original file from RClone remote.\\n"
            $rclone_binary delete "$rclone_remote$line" $rclone_bwlimit --stats-log-level NOTICE --stats 30s
            printf "\\nOriginal file deleted."
          else
            mv "$converted_dir/$NAME.$media_container" "$converted_dir/$NAME [Plexus Encode].$media_container"
            NAME="$NAME [Plexus Encode]"
            printf "\\nForce overwrite is disabled, new filename = $NAME.$media_container"
          fi
          printf "\\nUploading converted file to RClone remote.\\n"
          $rclone_binary move "$converted_dir/$NAME.$media_container" "$rclone_remote$DIRP" $rclone_bwlimit --stats-log-level NOTICE --stats 30s
          printf "\\nFile successfully uploaded."
        else
          if [ "$force_overwrite" = true ]
          then
            printf "\\nDeleting original file.\\n"
            /bin/rm "$line"
            printf "\\nOriginal file deleted."
          else
            mv "$converted_dir/$NAME.$media_container" "$converted_dir/$NAME [Plexus Encode].$media_container"
            NAME="$NAME [Plexus Encode]"
            printf "\\nForce overwrite is disabled, new filename = $NAME.$media_container"
          fi
          printf "\\nMoving converted file to the correct location.\\n"
          /bin/mv "$converted_dir/$NAME.$media_container" "$line"
          printf "\\nFile successfully moved."
        fi
        printf "\\nDeleting cached file and delisting it.\\n"
        /bin/rm "$convert_dir/$FILE"
        /bin/sed -i 1d "$list_file"
        printf "\\nOperation successfully completed.\\n"
      else
        printf "\\nFile codecs are already correct. Delisting it.\\n"
        /bin/sed -i 1d "$list_file"
        printf "\\nOperation successfully completed.\\n"
      fi
    else
      /bin/sed -i 1d "$list_file"
    fi
  done < "$list_file"
}

function func_help {
    printf "\\n\\e[37mUsage:\\n  plexus [flags]\\n  plexus [command]\\n\\nAvailable Commands:\\n  about           Learn more about the program\\n  config          Change the default variable values\\n  encode          Begin processing the encode queue\\n  help            Displays a list of available commands\\n  install         Reinstall Plexus or install any missing dependencies\\n  list            Build a .txt file containing media with incorrect codecs\\n  mount           Mount an RClone remote or cache, set from the config function\\n  unmount         Unmount an RClone remote or cache, set from the config function\\n\\nAdditional Information:\\n  Use 'plexus help command' to find out more about a specific command\\n"
}

function func_install {
    printf "\\e[33mWhat would you like to do?\\e[33m\\n\\e[0m\\n1 - Install missing dependencies\\n2 - Reinstall/Update Plexus\\n0 - Exit\\n"
    answer="waiting"
    while [ ! -z $answer ]
    do
        read -r -n 1 -p '' answer
        case $answer in
        "1")
            printf "\\n\\nWhich dependency?\\n1 - All\\n2 - FFmpeg\\n3 - Fuse\\n4 - RClone\\n0 - Exit\\n"
            answer="waiting"
            while [ ! -z $answer ]
            do
              read -r -n 1 -p '' answer
              case $answer in
              "1")
                  printf "\\n\\e[36mInstalling all dependencies.\\e[0m\\n\\n"
                  sudo apt-get install curl ffmpeg fuse unzip -y -qq
                  case $(curl https://rclone.org/install.sh 2>/dev/null | sudo bash -s beta) in
                    0)
                      printf "\\e[36mIf you haven't already, setup an RClone remote via 'rclone config'\\e[0m\\n"
                      printf "\\e[32mAll dependencies have been installed!\\e[0m\\n"
                      exit 0
                      ;;
                    2)
                      printf "\\e[31mYour operating system is not supported by RClone.\\e[0m\\n"
                      printf "\\e[32mFFmpeg and Fuse have been installed!\\e[0m\\n"
                      exit 0
                      ;;
                    3)
                      printf "\\e[36mRClone is already up-to-date!\\e[0m\\n"
                      printf "\\e[32mFFmpeg and Fuse have been installed!\\e[0m\\n"
                      exit 0
                      ;;
                    *)
                      printf "\\e[36mIf you haven't already, setup an RClone remote via 'rclone config'\\e[0m\\n"
                      printf "\\e[32mAll dependencies have been installed!\\e[0m\\n"
                      exit 0
                  esac
                  exit 0
                  ;;
              "2")
                  printf "\\n\\nWhich version?\\n1 - FFmpeg\\n2 - FFmpeg (custom)\\n0 - Exit\\n"
                  answer="waiting"
                  while [ ! -z $answer ]
                  do
                    read -r -n 1 -p '' answer
                    case $answer in
                    "1")
                        printf "\\n\\e[36mInstalling FFmpeg.\\n\\n\\e[0m"
                        sudo apt-get install ffmpeg -y -qq
                        printf "\\e[32mFFmpeg has been installed!\\e[0m\\n"
                        exit 0
                        ;;
                    "2")
                        printf "\\n\\e[36mInstalling FFmpeg (custom).\\nThis will take a few minutes as it's built from source with support for extended codecs\\n\\n\\e[0m"
                        sudo apt-get install build-essential curl g++ -y -qq
                        curl https://raw.githubusercontent.com/markus-perl/ffmpeg-build-script/master/web-install.sh?v1 2>/dev/null | sudo bash
                        printf "\\n\\nMoving FFmpeg into /usr/bin.\\n"
                        sudo /bin/mv -f "$HOME/ffmpeg-build/workspace/bin/ffmpeg" "/usr/bin"
                        printf "\\nRemoving FFmpeg build files.\\n"
                        sudo /bin/rm -r "$HOME/ffmpeg-build"
                        printf "\\n\\e[32mFFmpeg (custom) has been installed!\\e[0m\\n"
                        exit 0
                        ;;
                    "0")
                        printf "\\n\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
                        exit 0
                        ;;
                    *)
                        answer="invalid"
                        printf "\\n\\nPlease enter a valid menu option. Enter 0 to exit.\\e[0m\\n"
                        ;;
                    esac
                  done
                  ;;
              "3")
                  printf "\\n\\e[36mInstalling Fuse.\\n\\n\\e[0m"
                  sudo apt-get install fuse -y -qq
                  printf "\\e[32mFuse has been installed!\\e[0m\\n"
                  exit 0
                  ;;
              "4")
                  printf "\\n\\e[36mInstalling RClone.\\n\\n\\e[0m"
                  sudo apt-get install curl unzip -y -qq
                  case $(curl https://rclone.org/install.sh 2>/dev/null | sudo bash -s beta) in
                    0)
                      printf "\\e[36mIf you haven't already, setup an RClone remote via 'rclone config'\\e[0m\\n"
                      printf "\\e[32mRClone has been installed!\\e[0m\\n"
                      exit 0
                      ;;
                    2)
                      printf "\\e[31mYour operating system is not supported by RClone.\\e[0m\\n"
                      exit 0
                      ;;
                    3)
                      printf "\\e[36mRClone is already up-to-date!\\e[0m\\n"
                      exit 0
                      ;;
                    *)
                      printf "\\e[36mIf you haven't already, setup an RClone remote via 'rclone config'\\e[0m\\n"
                      printf "\\e[32mRClone has been installed!\\e[0m\\n"
                      exit 0
                  esac
                  ;;
              "0")
                  printf "\\n\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
                  exit 0
                  ;;
              *)
                  answer="invalid"
                  printf "\\n\\nPlease enter a valid menu option. Enter 0 to exit.\\e[0m\\n"
                  ;;
              esac
            done
            ;;
        "2")
            config_file="$HOME/.config/plexus/plexus.conf.bak"
            if [ -f "$config_file" ]
            then
              i=1
              while [ -f "$config_file.$i" ]
              do
                  let i++
              done
              config_file="$config_file.$i"
            fi

            /bin/mv "$HOME/.config/plexus/plexus.conf" "$config_file"
            printf "\\n\\nYour current config file has been backed up ($config_file).\\n"
            curl https://plexus.robt.me/install.sh 2>/dev/null | sudo bash
            exit 0
            ;;
        "0")
            printf "\\n\\nYou can find the config file here: $HOME/.config/plexus/plexus.conf\\n"
            exit 0
            ;;
        *)
            answer="invalid"
            printf "\\n\\nPlease enter a valid menu option. Enter 0 to exit.\\n"
            ;;
        esac
    done
}

function func_list {
  printf "\\n\\e[32mAudio codec: $audio_codec\\nList file: $list_file\\nMedia directory: $media_dir\\nMount Path: $mount_dir\\nVideo codec: $video_codec\\n\\n"

  if [ -f $list_file ]
  then
      answer="waiting"
      while [ ! -z $answer ]
      do
          read -r -n 1 -p 'This will delete the current list file. Do you want to continue? ' answer

          case ${answer,,} in
          "y")
              rm "$list_file"
              answer=""
              printf "\\n\\n"
              ;;
          "n")
              printf "\\nYou can find the current list file here: $list_file\\n"
              exit 4
              ;;
          *)
              answer="invalid"
              printf "\\nPlease enter yes or no.\\n"
              ;;
          esac
      done
  fi

  printf "\\e[32mScanning directory...\\n"
  while IFS= read -r line
  do
    DIRP=${line%/*}
    FILE=${line##*/}
    NAME=${FILE%.*}
    printf "\\e[94mScanning: $line\\n"
  	file_audio_codec=`$ffprobe_binary -v error -select_streams a:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$line"`
  	file_video_codec=`$ffprobe_binary -v error -select_streams v:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$line"`

    if [ ! -z "$file_audio_codec" ] || [ ! -z "$file_video_codec" ]
    then
      if [[ "$file_audio_codec" != "$audio_codec" || "$file_video_codec" != "$video_codec" ]]
    	then
        printf "\\e[34mAdding: $line\\n"
        line=${line#"$mount_dir"}
        echo "$line" >> $list_file
    	fi
    fi
    file_audio_codec=""
    file_video_codec=""

  done < <(find "$media_dir" -name '*.avi' -or -name '*.flv' -or -name '*.$media_container' -or -name '*.mov' -or -name '*.mp4' -or -name '*.mpg' -or -name '*.wmv')
  printf "\\e[32mScan complete! Run plexus encode to process the list.\\n\\e[0m"
}

function func_mount {
  printf "\\e[36mMounting RClone remote to $media_dir\\n\\e[0m"
  if ! $rclone_binary mount $rclone_remote $media_dir --allow-non-empty --allow-other --cache-db-purge --fast-list --poll-interval 10m &
  then
    printf "\\nAn uknown error occurred (does the remote exist?)\\n\\e[0m"
  else
    printf "\\n\\e[32mThe RClone remote has successfully been mounted!\\n\\e[0m"
  fi
}

function func_unmount {
  if [ -d "$media_dir" ]
  then
    printf "\\e[36mUnmounting RClone remote from $media_dir\\n\\e[0m"
    fusermount -uz "$media_dir"
    printf "\\n\\e[32mThe RClone remote has successfully been unmounted!\\n\\e[0m"
  else
    printf "\\e[31mThe directory does not exist.\\e[0m\\n"
  fi
}

if [ -z "$1" ]
then
  printf "$HEADER_TEXT"
  func_help
  exit 0
fi
command=$1
subcommand=$2
shift
printf "$HEADER_TEXT"
case "$command" in
  about)
    func_about
    ;;
  config)
    func_config
    ;;
  encode)
    while getopts ":a:fl:p:r:v:-:" opt; do
      case $opt in
        a)
          check_variable audio ${OPTARG,,}
          if [ $audio_codec = "null" ]
          then
            printf "You have not entered a supported audio codec.\\n"
            exit 0
          fi
          ;;
        f)
          force_overwrite="true"
          ;;
        l)
          if [ -f "$OPTARG" ]
          then
            list_file="$OPTARG"
          else
            printf "You have not entered a valid list file.\\n"
            exit 1
          fi
          ;;
        p)
          check_variable ffmpeg_preset ${OPTARG,,}
          if [ $ffmpeg_preset = "null" ]
          then
            printf "You have not entered a valid ffmpeg preset.\\n"
            exit 0
          fi
          ;;
        r)
          $rclone_binary listremotes > $HOME/.plexus/rclone/remotes.txt
          if [ ! -z "$(grep "$OPTARG" "$HOME/.plexus/rclone/remotes.txt")" ]
          then
            if [ "${OPTARG: -1}" == ":" ]
            then
                rclone_remote="$OPTARG"
            else
                rclone_remote="$OPTARG:"
            fi
            remote_transfer=true
          else
            printf "You have not entered a valid remote.\\n"
            exit 0
          fi
          ;;
        v)
          check_variable video ${OPTARG,,}
          if [ $video_codec = "null" ]
          then
            printf "You have not entered a supported video codec.\\n"
            exit 0
          fi
          ;;
        -)
          val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          case ${OPTARG} in
            "bwlimit"*)
              rclone_bwlimit="$val"
              ;;
            "verbose"*)
              verbose="true"
              ;;
          esac
          ;;
        \?)
          echo "Invalid option: -$OPTARG." >&2
          exit 1
          ;;
        :)
          echo "Option -$OPTARG requires an argument." >&2
          exit 1
          ;;
      esac
    done
    if [ $OPTIND -eq 1 ]
    then
      printf "\\n\\e[39mUsage:\\n  plexus encode -l /path/to/list.txt -d /path/to/media/ [flags]\\n  plexus encode -l /path/to/list.txt -r RCloneRemote: [flags]\\n\\nFlags:\\n  -a              Audio codec. Default = $audio_codec\\n  -d              Media directory. Default = $media_dir\\n  -f              Force overwrite. Default = $force_overwrite\\n  -l              List location. Default = $list_file\\n  -p              FFMpeg preset. Default = $ffmpeg_preset\\n  -r              RClone remote. Use this for RClone integration\\n  -v              Video codec. Default = $video_codec\\n  --bwlimit       Limit RClone's active connection speed\\n  --verbose       Show detailed log\\n"
      exit 0
    fi
    if [ ! -z "$list_file" ]
    then
      if [ $dependency_ffmpeg = true ]
      then
        func_encode
      else
        printf "\\e[31mPlease install ffmpeg to use this command\\e[0m\\n"
        exit 0
      fi
    else
      printf "You must specify a list file.\\n"
    fi
    shift $((OPTIND -1))
    ;;
  help)
    case "${subcommand,,}" in
      "about")
        printf "This command tells you more about it's creation.\\n"
        ;;
      "encode")
        printf "\n\\e[39mAbout:\\n  The encode command processes a list generated from the list\\n  command and converts each listed file into two proposed codecs\\n  (set to H264 and AAC by default)\\n\\nUsage:\\n  plexus encode -l /path/to/list.txt -d /path/to/media/ [flags]\\n  plexus encode -l /path/to/list.txt -r RCloneRemote: [flags]\\n\\nFlags:\\n  -a              Audio codec. Default = $audio_codec\\n                  This allows you to set a preferred audio codec\\n                  on runtime, rather than setting a default via\\n                  the config function\\n\\n  -d              Media directory. Default = $media_dir\\n                  This is the directory that your media is stored\\n                  within\\n\\n  -f              Force overwrite. Default = $force_overwrite\\n                  The newly encoded file will overwrite the\\n                  existing file\\n\\n  -l              List location. Default = $list_file\\n                  This is where your previously generated list file\\n                  is\\n\\n  -p              FFMpeg preset. Default = $ffmpeg_preset\\n                  This is the FFmpeg preset that will be used when\\n                  encoding your media\\n\\n  -r              RClone remote. Use this for RClone integration\\n                  Don't use this if you're converting local media.\\n                  This points Plexus to your pre-configured RClone\\n                  remote\\n\\n  -v              Video codec. Default = $video_codec\\n                  This allows you to set a preferred video codec\\n                  on runtime, rather than setting a default via\\n                  the config function\\n\\n  --bwlimit       Limit RClone's active connection speed\\n                  To prevent using too much bandwidth, you can\\n                  set an active limit in KB/s\\n\\n  --verbose       Show detailed log\\n                  Shows you a more detailed log of what's happening.\\n                  Use this when expriencing issues\\n"
        ;;
      *)
        func_help
        ;;
    esac
    ;;
  install)
    func_install
    shift $((OPTIND -1))
    ;;
  list)
    while getopts ":a:d:l:m:v:" opt; do
      case $opt in
        a)
          check_variable audio ${OPTARG,,}
          if [ $audio_codec = "null" ]
          then
            printf "You have not entered a supported audio codec.\\n"
            exit 0
          fi
          ;;
        d)
          if [ -d "$OPTARG" ]
          then
              if [ "${OPTARG: -1}" == "/" ]
              then
                  media_dir="${OPTARG::-1}"
              else
                  media_dir="$OPTARG"
              fi
          else
              printf "You have not entered a valid directory.\\n"
              exit 1
          fi
          ;;
        l)
          list_file="$OPTARG"
          list_dir=$(dirname "${list_file}")

          if [ ! -d "$list_dir" ]
          then
              printf "You have not entered a valid list directory.\\n"
              exit 1
          fi
          ;;
        m)
          mount_dir="$OPTARG"

          if [ ! -d "$mount_dir" ]
          then
              printf "You have not entered a valid mount directory.\\n"
              exit 1
          fi
          ;;
        v)
          check_variable video ${OPTARG,,}
          if [ $video_codec = "null" ]
          then
            printf "You have not entered a supported video codec.\\n"
            exit 0
          fi
          ;;
        \?)
          printf "Invalid option: -$OPTARG.\\n"
          exit 1
          ;;
        :)
          printf "Option -$OPTARG requires an argument.\\n"
          exit 1
          ;;
      esac
    done
    if [ $OPTIND -eq 1 ]
    then
      printf "\\n\\e[39mUsage:\\n  plexus list -d /path/to/media [flags]\\n\\nFlags:\\n  -a              Audio codec. Default = $audio_codec\\n  -d              Media directory. Default = $media_dir\\n  -l              List location. Default = $list_file\\n  -m              Mount path, used for RClone. Removed from the beginning of each list line\\n  -v              Video codec. Default = $video_codec\\n"
      exit 0
    fi
    func_list
    shift $((OPTIND -1))
    ;;
  mount)
    if [ $dependency_fuse = true ]
    then
      while getopts ":r:" opt; do
        case $opt in
          r)
            if [ "${OPTARG: -1}" == ":" ]
            then
                rclone_remote="$OPTARG"
            else
                rclone_remote="$OPTARG:"
            fi
            ;;
          \?)
            printf "Invalid option: -$OPTARG.\\n"
            exit 1
            ;;
          :)
            printf "Option -$OPTARG requires an argument.\\n"
            exit 1
            ;;
        esac
      done
      if [ $OPTIND -eq 1 ]
      then
        printf "\\e[39mUsage:\\n  plexus mount -r RCloneRemote:\\n\\nFlags:\\n  -r              RClone remote. Setup via rclone config\\n"
        exit 0
      fi
      func_mount
      shift $((OPTIND -1))
    else
      printf "\\e[31mPlease install fuse to use this command\\e[0m\\n"
      exit 0
    fi
    ;;
  unmount)
    if [ $dependency_fuse = true ]
    then
      while getopts ":d:" opt; do
        case $opt in
          d)
            media_dir=$OPTARG
            ;;
          \?)
            printf "Invalid option: -$OPTARG.\\n"
            exit 1
            ;;
          :)
            printf "Option -$OPTARG requires an argument.\\n"
            exit 1
            ;;
        esac
      done
      if [ $OPTIND -eq 1 ]
      then
        printf "\\e[39mUsage:\\n  plexus unmount -d /path/to/mounted/media/\\n\\nFlags:\\n  -d              Media directory.\\n"
        exit 0
      fi
      func_unmount
      shift $((OPTIND -1))
    else
      printf "\\e[31mPlease install fuse to use this command\\e[0m\\n"
      exit 0
    fi
    ;;
  *)
    printf "This is not a valid command.\\nSee 'plexus help' for more information.\\n"
    exit 0
    ;;
esac
### COMMAND HANDLER ###

main "$@"
